@{
    ViewData["Title"] = "ActionTest";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>



<p>
    Structure of MVC:

    <ul>
        <li>
            Model (data structure)
            <br />
            Entities
            <br />
            Service Layer
            Data Acces Layer -> Repositories
        </li>
        <li>
            View (estrutura e comportamento visual)
        </li>
        <li>
            Controller (recebe e trata as interações do utilizador com o sistema
        </li>
    </ul>

</p>

<br />


<p>
    If we are working with Webservices Technology:
    <ul>
        <li>
            React
        </li>
        <li>
            Vue.js
        </li>
        <li>
            Angular
        </li>
    </ul>

    Another type of working:
    Template Engine
    (Technology -> Framework -> Template)
    <ul>
        <li>
            Java => Spring => Thymeleaf
        </li>
        <li>
            C# => ASPNetCore => Razor
        </li>
        <li>
            PHP => laravel => blade template
        </li>
    </ul>

</p>

<br />


<p>
    Methods to call in Controller:
    <table>
        <tr>
            <td>
                Type
            </td>
            <td>
                Method builder
            </td>

        </tr>
        <tr>
            <td>
                ViewResult
            </td>

            <td>
                View
            </td>

        </tr>
        <tr>
            <td>
                PartialViewResult
            </td>
            <td>
                PartialView
            </td>

        </tr>
        <tr>
            <td>
                ContentResult
            </td>

            <td>
                Content
            </td>

        </tr>
        <tr>
            <td>
                RedirectResult
            </td>

            <td>
                Redirect
            </td>

        </tr>
        <tr>
            <td>
                RedirectToRouteResult
            </td>

            <td>
                RedirectToAction
                <br />
                Ex: RedirectToAction("Index", "Home", new { page = 1, sortBy = price} ))
            </td>

        </tr>
        <tr>
            <td>
                JsonResult
            </td>

            <td>
                Json
            </td>
        </tr>
        <tr>
            <td>
                FileResult
            </td>
            <td>
                File
            </td>
        </tr>
        <tr>
            <td>
                HttpNotFoundResult
            </td>
            <td>
                HttpNotFound
            </td>
        </tr>
        <tr>
            <td>
                EmptyResult
            </td>
            <td>
                -
            </td>
        </tr>

    </table>

    <br />
    <br />


<p>
    Install MySQL provider:
</p>

<ul>
    <li>
        Open NuGet Package Manager Console
    </li>
    <li>
        Install-Package Pomelo.EntityFrameworkCore.MySql
    </li>
</ul>


<br />
<br />


<p>
    (CODE-FIRST Migration)
    Package Manager Console -> create first Migration:
    (execute this commands in PM Console)
</p>

<ul>
    <li>
        Add-Migration Initial
    </li>
    <li>
        Update-Database
    </li>
</ul>

After this steps, a new folder "Migrations" is created with the first verion of database and this information is syncronized with MySql server automatically.
We can check if everything is ok, opening MySql Workbench.

</p>


<br />
<br />


<p>
    How to make some changes in the Data Model and Update those differences in Database:

    <ul>
        <li>
            Implement domain model
        </li>
        <li>
            Add DbSet's in DbContext
            (file: Data\SalesWebMvcContext.cs)
            (ex: add new entity => public DbSet<Seller> Seller { get; set; })
        </li>
        <li>
            Run update commands
            <ul>
                <li>
                    Add-Migration OtherEntities
                </li>
                <li>
                    Update-Database
                </li>
            </ul>
        </li>
    </ul>

</p>


<br />
<br />


<p>
    Create Seeding Service to populate DB Data
    Create Data\SeedingService.cs class
    Add this service to Startup.cs\ConfigureServices (ex: services.AddScoped<SeedingService>(); )

    </p>

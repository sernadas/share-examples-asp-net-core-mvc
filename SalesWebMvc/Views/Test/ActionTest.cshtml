@{
    ViewData["Title"] = "ActionTest";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>



<p>
    Structure of MVC:

    <ul>
        <li>
            Model (data structure)
            <br />
            Entities
            <br />
            Service Layer
            Data Acces Layer -> Repositories
        </li>
        <li>
            View (estrutura e comportamento visual)
        </li>
        <li>
            Controller (recebe e trata as interações do utilizador com o sistema
        </li>
    </ul>

</p>

<br />


<p>
    If we are working with Webservices Technology:
    <ul>
        <li>
            React
        </li>
        <li>
            Vue.js
        </li>
        <li>
            Angular
        </li>
    </ul>

    Another type of working:
    Template Engine
    (Technology -> Framework -> Template)
    <ul>
        <li>
            Java => Spring => Thymeleaf
        </li>
        <li>
            C# => ASPNetCore => Razor
        </li>
        <li>
            PHP => laravel => blade template
        </li>
    </ul>

</p>

<br />


<p>
    Methods to call in Controller:
    <table>
        <tr>
            <td>
                Type
            </td>
            <td>
                Method builder
            </td>

        </tr>
        <tr>
            <td>
                ViewResult
            </td>

            <td>
                View
            </td>

        </tr>
        <tr>
            <td>
                PartialViewResult
            </td>
            <td>
                PartialView
            </td>

        </tr>
        <tr>
            <td>
                ContentResult
            </td>

            <td>
                Content
            </td>

        </tr>
        <tr>
            <td>
                RedirectResult
            </td>

            <td>
                Redirect
            </td>

        </tr>
        <tr>
            <td>
                RedirectToRouteResult
            </td>

            <td>
                RedirectToAction
                <br />
                Ex: RedirectToAction("Index", "Home", new { page = 1, sortBy = price} ))
            </td>

        </tr>
        <tr>
            <td>
                JsonResult
            </td>

            <td>
                Json
            </td>
        </tr>
        <tr>
            <td>
                FileResult
            </td>
            <td>
                File
            </td>
        </tr>
        <tr>
            <td>
                HttpNotFoundResult
            </td>
            <td>
                HttpNotFound
            </td>
        </tr>
        <tr>
            <td>
                EmptyResult
            </td>
            <td>
                -
            </td>
        </tr>

    </table>

    <br />
    <br />


<p>
    Install MySQL provider:
</p>

<ul>
    <li>
        Open NuGet Package Manager Console
    </li>
    <li>
        Install-Package Pomelo.EntityFrameworkCore.MySql
    </li>
</ul>


<br />
<br />


<p>
    (CODE-FIRST Migration)
    Package Manager Console -> create first Migration:
    (execute this commands in PM Console)
</p>

<ul>
    <li>
        Add-Migration Initial
    </li>
    <li>
        Update-Database
    </li>
</ul>

After this steps, a new folder "Migrations" is created with the first verion of database and this information is syncronized with MySql server automatically.
We can check if everything is ok, opening MySql Workbench.

</p>


<br />
<br />


<p>
    How to make some changes in the Data Model and Update those differences in Database:

    <ul>
        <li>
            Implement domain model
        </li>
        <li>
            Add DbSet's in DbContext
            (file: Data\SalesWebMvcContext.cs)
            (ex: add new entity => public DbSet<Seller> Seller { get; set; })
        </li>
        <li>
            Run update commands
            <ul>
                <li>
                    Add-Migration OtherEntities
                </li>
                <li>
                    Update-Database
                </li>
            </ul>
        </li>
    </ul>

</p>


<br />
<br />


<p>
    Create Seeding Service to populate DB Data:
    <ul>
        <li>
            Create Data\SeedingService.cs class (with method seed)
        </li>
        <li>
            Register this service to Startup.cs\ConfigureServices (ex: services.AddScoped<SeedingService>(); )
        </li>
        <li>
            Add service as a parameter of configure method Startup.cs\ConfigureServices (public void Configure(IApplicationBuilder app, IHostingEnvironment env, SeedingService seedingService))
        </li>
        <li>
            Call command seedingService.Seed(); in development envoironment to populate DB
        </li>

    </ul>
</p>


<br />
<br />


<p>
    Some Database commands:
    <table class="table table-striped table-hover">
        <thead>
            <tr class="success">
                <th>
                    Command
                </th>
                <th>
                    Code Example
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    Get boolean true if exists any data &nbsp;
                </td>
                <td>
                    _context.Department.Any();
                </td>
            </tr>
            <tr>
                <td>
                    Insert objet into Database
                </td>
                <td>
                    Department d1 = new Department(1, "Computers");
                    _context.Department.AddRange(d1, d2, d3, d4);
                </td>
            </tr>
            <tr>
                <td>
                    Commit transaction to Database
                </td>
                <td>
                    _context.SaveChanges();
                </td>
            </tr>
        </tbody>
    </table>

</p>



<br />
<br />


<p>

    Creating a service:

    <ul>
        <li>
            Create Services folder in the Project
        </li>
        <li>
            Create the class of service ex: SellerService.cs
        </li>
        <li>
            Register the service to dependency injection system
        </li>
        <li>
            Implement FindAll method that returns List<Seller> Element
        </li>
        <li>
            Change Controller to call the FindAll method of Service (first the controller has to contain the dependency, this is possible creating a private readonly variable, and set this in the contructor method of Controller)
        </li>
        <li>
            Create a view that show the data received by the controller
            <br />
            get data on the view : at model IEnumerable<SalesWebMvc.Models.Seller>
                <br />
                write some block codes : at { ViewData["Title"] = "Sellers"; }
                <br />
                read a variable : at ViewData["Title"]
                <br />
                display column name in HTML: at Html.DisplayNameFor(model => model.Name)
                <br />
                process list as a cycle : at foreach (Seller seller in Model)
                <br />
                write that data : at Html.DisplayFor(modelItem => seller.Email)
                <br />
                Write link to some controller:<a asp-action="Edit" asp-route-id="at seller.Id" asp-controller="Sellers"> Edit</a>
                <br />

        </li>
    </ul>

</p>


<br />
<br />


<h4>
    Entity Framework -> Foreign Key
</h4>
<p>
    Using Entity Framework, there is a trick to garantee the Referencial Integrity with Foreign Key not null.
    It should be created a Property in the Model class, to reference the Parent's Id, using a specific format (ParentId).
    ex: public int DepartmentId { get; set; }
</p>


<br />
<br />


<h4>
    View Models
</h4>
<p>
    Some views are more complex and it need more than one Entity to show data/form.
    In this cases, it has to be created a ViewModel to group the Related Entities.
    This new ViewModel is passed by the controller to the view as an argument and it contains the different objets/Entities needed.
    In this example, I create a new Formulary with Seller and Department information. A list of Departments is mandatory to create a HTML Select Item, and be associated to the Foreign key Seller.DepartmentId.
    This list of Departments was returned by a method FindAll in the new DepartmentService created.
</p>



<br />
<br />


<h4>
    Delete Form
</h4>
<p>
    To create a Form to delete, the steps to do it:
    In SellerService, create FindById and Remove operations
    In controller, create "Delete" GET action (this method just validate Id is valid)
    In controller, create "Delete" POST action (saves the information in Database)
    In View/Sellers/Index, check link to "Delete" action
    Create delete confirmation view: View/Sellers/Delete (with confirmation data)
</p>

